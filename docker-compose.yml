version: '3.8'

networks:
  kong-net:
    driver: bridge

services:
  retriever_agent:
    build: ./retriever_agent
    networks:
      - kong-net
    expose:
      - "8000"

  processor_agent:
    build: ./processor_agent
    networks:
      - kong-net
    expose:
      - "8000"

  policy_service:
    build: ./policy_service
    networks:
      - kong-net
    expose:
      - "8000"
  
  orchestrator_agent:
    build: ./orchestrator_agent
    networks:
      - kong-net
    volumes:
      - ./logs:/app/logs
    expose:
      - "8000"

  kong-db:
    image: postgres:13
    networks:
      - kong-net
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_DB=kong
      - POSTGRES_PASSWORD=kong
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  kong-migrations:
    image: kong:3.4
    networks:
      - kong-net
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-db
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
    command: "kong migrations bootstrap"
    restart: on-failure
    depends_on:
      kong-db:
        condition: service_healthy

  kong:
    image: kong:3.4
    networks:
      - kong-net
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-db
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
    ports:
      - "8000:8000"
      - "8001:8001"
    depends_on:
      kong-migrations:
        condition: service_completed_successfully
      kong-db:
        condition: service_healthy

  deck:
    image: kong/deck
    networks:
      - kong-net
    volumes:
      - ./:/work
    working_dir: /work
    command: tail -f /dev/null
    depends_on:
      - kong